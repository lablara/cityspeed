--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: topology; Type: SCHEMA; Schema: -; Owner: _admin
--

CREATE SCHEMA topology;



--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry, geography, and raster spatial types and functions';


--
-- Name: postgis_topology; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis_topology WITH SCHEMA topology;


--
-- Name: EXTENSION postgis_topology; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis_topology IS 'PostGIS topology spatial types and functions';


SET search_path = public, pg_catalog;

--
-- Name: fn_calculate_speed(text, integer, geometry, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: 
--

CREATE FUNCTION fn_calculate_speed(p_di text, p_id integer, p_lc geometry, p_ts timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql
    AS $$DECLARE loc geometry;
DECLARE tsp timestamp without time zone;
DECLARE speed NUMERIC := 0;
DECLARE time_interval int;
DECLARE v_id int := 0;
DECLARE v_dist NUMERIC = 0;
BEGIN
SELECT id, location, timestamp INTO v_id, loc, tsp FROM public.user_data u WHERE u.device_id = p_di AND u.id < p_id ORDER BY u.id DESC LIMIT 1;
time_interval := EXTRACT(EPOCH FROM (p_ts - tsp));
v_dist := ST_Distance_Sphere(loc, p_lc);
IF(v_id = 0) THEN
	RETURN speed;
END IF;    
IF(time_interval < 30 AND time_interval > 0) THEN
	speed := ROUND((( v_dist / time_interval) * 3.6)::numeric, 2);
END IF;
IF(time_interval = 0) THEN
	speed := fn_calculate_speed(p_di, v_id, loc, tsp);
END IF;

IF(speed > 180) THEN
	speed := 0;
END IF;
RETURN speed;
END
$$;


ALTER FUNCTION public.fn_calculate_speed(p_di text, p_id integer, p_lc geometry, p_ts timestamp without time zone) OWNER TO ;

--
-- Name: fn_delete_one_day_record(); Type: FUNCTION; Schema: public; Owner: 
--

CREATE FUNCTION fn_delete_one_day_record() RETURNS integer
    LANGUAGE plpgsql
    AS $$DECLARE total INTEGER;

BEGIN

SELECT COUNT(*) INTO total FROM user_data WHERE id IN (SELECT id FROM user_data WHERE date_trunc('day', timestamp) IN (
SELECT date_trunc('day', timestamp) from user_data where device_speed = 0 group by date_trunc('day', timestamp)  having count(*) < 2));

DELETE FROM user_data WHERE id IN ((SELECT id FROM user_data WHERE date_trunc('day', timestamp) IN (
SELECT date_trunc('day', timestamp) from user_data where device_speed = 0 group by date_trunc('day', timestamp)  having count(*) < 2)));

RETURN total;

END$$;


ALTER FUNCTION public.fn_delete_one_day_record() OWNER TO ;

--
-- Name: fn_remove_location_duplicates(); Type: FUNCTION; Schema: public; Owner: 
--

CREATE FUNCTION fn_remove_location_duplicates() RETURNS void
    LANGUAGE sql
    AS $$DELETE  FROM
    location_data a
        USING location_data b
WHERE
    a.id < b.id
    AND a.id_user_data = b.id_user_data;$$;


ALTER FUNCTION public.fn_remove_location_duplicates() OWNER TO ;

--
-- Name: fn_trg_calculate_speed(); Type: FUNCTION; Schema: public; Owner: 
--

CREATE FUNCTION fn_trg_calculate_speed() RETURNS trigger
    LANGUAGE plpgsql
    AS $$DECLARE loc geometry;
DECLARE tsp timestamp without time zone;
DECLARE speed NUMERIC := 0;
DECLARE time_interval int;
DECLARE v_id int := 0;
DECLARE v_dist NUMERIC = 0;
BEGIN
SELECT id, location, timestamp INTO v_id, loc, tsp FROM public.user_data u WHERE u.device_id = NEW.device_id AND u.id < NEW.id ORDER BY u.id DESC LIMIT 1;
time_interval := EXTRACT(EPOCH FROM (NEW.timestamp - tsp));
v_dist := ST_Distance_Sphere(loc, NEW.location);
IF(v_id = 0) THEN
	RETURN NULL;
END IF;    

IF(time_interval < 30 AND time_interval > 0) THEN
	speed := ROUND((( v_dist / time_interval) * 3.6)::numeric, 2);
END IF;

IF(time_interval = 0) THEN
	speed := fn_calculate_speed(NEW.device_id, v_id, loc, tsp);
END IF;

IF(speed > 180) THEN
	speed := 0;
END IF;

UPDATE user_data SET haversine_speed = speed WHERE id = NEW.id;

RETURN NULL;
END

$$;


ALTER FUNCTION public.fn_trg_calculate_speed() OWNER TO ;

--
-- Name: fn_update_process_data(); Type: FUNCTION; Schema: public; Owner: 
--

CREATE FUNCTION fn_update_process_data() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

BEGIN
UPDATE user_data SET processed_address = 1 WHERE id = NEW.id_user_data;
RETURN NULL;
END

$$;


ALTER FUNCTION public.fn_update_process_data() OWNER TO ;

--
-- Name: location_data_id_seq; Type: SEQUENCE; Schema: public; Owner: 
--

CREATE SEQUENCE location_data_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.location_data_id_seq OWNER TO ;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: location_data; Type: TABLE; Schema: public; Owner: ; Tablespace: 
--

CREATE TABLE location_data (
    id integer DEFAULT nextval('location_data_id_seq'::regclass) NOT NULL,
    id_user_data integer,
    street character varying(255),
    city character varying(255),
    state character varying(255),
    country character varying(255)
);


ALTER TABLE public.location_data OWNER TO ;

--
-- Name: user_data; Type: TABLE; Schema: public; Owner: ; Tablespace: 
--

CREATE TABLE user_data (
    id integer NOT NULL,
    id_firebase character varying(50) NOT NULL,
    device_id text,
    location geometry(Geometry,4326),
    device_speed numeric(5,2),
    haversine_speed numeric(5,2) DEFAULT NULL::numeric,
    "timestamp" timestamp without time zone,
    processed_address integer DEFAULT 0,
    aux integer DEFAULT 0
);


ALTER TABLE public.user_data OWNER TO ;

--
-- Name: user_data_id_seq; Type: SEQUENCE; Schema: public; Owner: 
--

CREATE SEQUENCE user_data_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;



--
-- Name: user_data_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: 
--

ALTER SEQUENCE user_data_id_seq OWNED BY user_data.id;


ALTER TABLE ONLY user_data ALTER COLUMN id SET DEFAULT nextval('user_data_id_seq'::regclass);


--
-- Name: location_data_pkey; Type: CONSTRAINT; Schema: public; Owner: ; Tablespace: 
--

ALTER TABLE ONLY location_data
    ADD CONSTRAINT location_data_pkey PRIMARY KEY (id);


--
-- Name: user_data_pkey; Type: CONSTRAINT; Schema: public; Owner: ; Tablespace: 
--

ALTER TABLE ONLY user_data
    ADD CONSTRAINT user_data_pkey PRIMARY KEY (id);


--
-- Name: trg_update_process_address; Type: TRIGGER; Schema: public; Owner: 
--

CREATE TRIGGER trg_update_process_address AFTER INSERT ON location_data FOR EACH ROW EXECUTE PROCEDURE fn_update_process_data();


--
-- Name: trg_update_speed; Type: TRIGGER; Schema: public; Owner: 
--

CREATE TRIGGER trg_update_speed AFTER INSERT ON user_data FOR EACH ROW EXECUTE PROCEDURE fn_trg_calculate_speed();
